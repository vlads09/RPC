struct authorization {
    string id<16>; // user id given from client to server
};

struct approve {
    string authorization_token<16>; // client input for the server signature
};

struct approve_response {
    string authorization_token<16>; // user's authorization token
    int verify; // verification value
    string permissions<50>; // user's permission attached to the signature
};

struct access {
    string id<16>; // user id
    string refresh<2>; // user option for refreshing the access token or not
    approve_response authorization_token; // authorization token with signature
};

struct access_response {
    string access_token<16>; // access token generated by the server
    string refresh_token<16>; // refresh token generated if the refresh option was activated
    int valability; // access token valability
};

struct action {
    string operation<10>; // user's operation
    string source<15>; // the resource on which the operation will be applied
    string access_token<16>; // access token which will be used to validate the permission
};

struct refresh_input {
    string id<16>; // user id
    string refresh<16>; // refresh token
};

struct refresh_output {
    string access_token<16>; // new access token after generating it from the old refresh token
    string refresh_token<16>; // new refresh token for a next time refreshment
    int valability; // access token valability
};

program GRADE_PROG {
    version GRADE_VERS {
        string request_authorization_token(authorization) = 1;
        approve_response approve_request_token(approve) = 2;
        access_response request_access_token(access) = 3;
    } = 1;

    version GRADE_VERS_2 {
        string validate_delegated_action(action)= 1;
    } = 2;

    version GRADE_VERS_3 {
        refresh_output get_new_token(refresh_input) = 1;
    } = 3;
} = 0x31234567;
